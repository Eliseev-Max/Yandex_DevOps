Некоторые факторы из Twelve-Factor App
Из этого урока вы научитесь:
  * Правилам (факторам), по которым строятся приложения.
  * Понимать, как эти факторы работают в реальных условиях.
  * Отбирать только самые необходимые атрибуты для ваших приложений.


(DIY, Do It Yourself, "сделай сам")

SaaS (Software as a Service) 
  — концепция приложения, доступного по требованию.
  • легко запускать и останавливать (как systemd сервис);
  • легко деплоить и расширять при необходимости.

Такие приложения:
  - используют декларативные форматы при установке/настройке;
  - максимально портативны и независимы от ОС;
  - подходят для запуска в облаке (что избавляет от нужды в сисадминах);
  - мало отличаются в продуктивной и девелоперской версии благодаря CD процессу;
  - могут расширяться без серьёзных изменений в архитектуре/коде/инструментах.

  → Чаще всего SaaS приложения "живут" в облаке;
  → Подходит для небольшой компании или стартапа (потому как не требует поддержки серверов и глубокой экспертизы в серверных ОС)


12 факторов, которым должна соответствовать архитектура SaaS приложения:	#~best-practice
  
  ♦ Кодовая база (Codebase)
    - исходники приложения должны лежать в репозитории в системе контроля версий;
	- одно приложение — один репозиторий;
	- приложение не может собираться из нескольких репозиториев сразу, но может зависеть от других приложений.
	
  ♦ Зависимости (Dependencies)
    - все пакеты, от которых зависит приложение, должны быть объявлены
	- примеры инструментов изоляции зависимостей:
	  ○ virtualenv (Python)
	  ○ контейнер
	  
  ♦ Конфигурация (Config)
    - храним переменные для подключения к различным внешним сервисам в конфигурационных файлах,
      которые сохраняются в используемом нами окружении, а НЕ В КОДЕ
	  (внешние подключения должны быть определены в переменных, как и другие вещи, которые можно параметризовать в приложении)
	  
  ♦ Сторонние службы (Backing services)
    - это любые сервисы, которые использует приложение (например, Message Queue или REST API)
	‼ Любые изменения в сторонних службах должны происходить без изменения кода приложения!
	 (адреса сторонних служб не должны быть «захардкожены»)
	 
  ♦ Сборка, релиз, выполнение (Build, release, run)
    - Стоит строго разделять 3 стадии превращения кода в запущенное приложение:
      ○ сборка — создание исполняемого артефакта.
	    На этом этапе притягиваются зависимости, код компилируется в бинарные файлы
	  ○ релиз — соединение исполняемого артефакта с конфигурацией под среду, на которой он будет запущен
      ○ выполнение (runtime) — запуск и исполнение приложения на целевой среде

  ♦ Процессы (Processes)
      - приложения для развёртывания в облаке не должны хранить внутри себя файлы с состоянием
	  (всё необходимое для сохранения должно быть сохранено вне приложения)
	  
  ♦ Привязка портов (Port binding)
    - каждое приложение будет иметь собственный порт для работы с ним, быть самодостаточным,
	  а не запускаться внутри контейнера веб-приложения
  
  ♦ Параллелизм (Concurrency)
    - написанное приложение должно иметь возможность масштабироваться: вертикально и между несколькими VM

  ♦ Утилизируемость
    - стремимся уменьшить время старта приложения и его работу
	  (мы не храним состояния → как можно меньше по времени хранить состояние в кэше)
	  (Остановка приложения не должна зависать, вызывать проблемы. Корректное завершение по SIGTERM)
  
  ♦ Паритет разработки/работы приложения
    - стремимся уменьшить различия между тестовыми и продуктивными средами.
	  ○ уменьшаем время сборки деплоя;
	  ○ разработчики имеют доступ к продуктивному окружению, могут видеть на нём результаты своей работы;
	  ○ стремимся держать продуктивные и тестовые стенды в одинаковом состоянии
	    (одинаковые инструменты, одинаковые версии пакетов)
		
  ♦ Журналирование (Logs)
  
  ♦ Задачи администрирования (Admin processes)
    - служебные скрипты, обслуживающие основное приложение,
	  должны иметь возможность использовать основные переменные окружения.

more:
{The Twelve-Factor App:https://12factor.net/ru/}
{RedHat. An illustrated guide to 12 Factor Apps: https://www.redhat.com/architect/12-factor-app}

Где посмотреть зависимости:
  - зависимости бэкенда:файл backend/pom.xml,
  - зависимости фронта — frontend/package.json


В GitLab есть возможность создавать разные environments для Job
  Environment описывает целевое окружение, на которое будет выполняться развёртывание приложения.
С помощью таких окружений, можно, например, делать rollback.
  Rollback - откат развёртывания на предыдущую версию кода.
