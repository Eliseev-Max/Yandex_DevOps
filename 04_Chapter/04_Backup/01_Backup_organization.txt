Организация резервного копирования
Из этого урока вы научитесь:
  • Понимать, как работают бэкапы, и что это такое.
  • Понимать механику снэпшотов.
  • Находить разницу между бэкапами и снапшотами.
  • Делать полный бэкап инфраструктуры.
  • Понимать, как делать инкрементальный и смешанный бэкапы.
  • Находить отличия между полным, инкрементальным и смешанным бэкапами.
  • Понимать типы ротаций бэкапов по количеству, дате и объёму.
  • Определять частоту и размещение бэкапов в зависимости от ресурсов.
  • Настраивать ротацию бэкапов.


Как работает бэкапирование:
  ○ Есть VM, в которой развёрнута определённая ОС, установлены пакеты и некоторая версия приложения.
  • В момент времени, когда нагрузка на приложение (=систему) минимальна (обычно - ночь/раннее утро)
    делается полный бэкап всей системы;
  ☼ Бэкап перемещается в хранилище = другую VM.

Скрипты выполняютс под "руководством" cron. 
cron — встроенная утилита, запускающая скрипты и программы по расписанию (иногда называют scheduler)

  → просмотр скриптов в текущем расписании:
    $ crontab -l
  
  → внести изменения в текущее расписание:
    $ crontab -e

Синтаксис расписания cron:
  [минута] [час] [день] [месяц] [день_недели] <путь_к_скрипту_или_непосредственно_команда>
  
  Если время запуска неважно, то указывается *
  Пример:
  
  10 3 * * * /home/jarservice/my.sh			# запуск shell-скрипта каждый день в 3:10 утра

  */1 7-19 * * 1 /home/jarservice/my.sh		# запускать каждую минуту понедельника с 7 до 19

‼ понедельник - 1 (первый день)
‼ воскресенье - 7 | 0 (седьмой или нулевой день)

Конфигурирование

  /etc/cron.allow  - в файле можно указать список пользователей, у которых будет доступ к cron
  /etc/cron.deny  - в файле можно указать список пользователей, которым запретим доступ

‼! имена записываются по одному на каждой строчке
‼ Одновременно можно использовать только одного из них.

в файл /etc/crontab тоже иногда записывают расписания


################
# Типы бэкапов #
################

  ♦ Полный бэкап:
    -> когда мы делаем сохранение всей системы целиком.
	# САМЫЙ БЫСТРЫЙ при восстановлении
  
    Создание бэкапа с виртуальной машины обычно не сильно влияет на работу приложения,
	Создание бэкапа базы данных с помощью утилит по созданию дампов вполне может отразиться на пользователях.

  ♦ Инкрементальный бэкап:  
    + делаем новый бэкап, отталкиваясь от ПОЛНОГО;
	+ сохраняем не всё состояние системы, а только то, что изменилось с момента полного или предыдущего инкрементального бэкапа.
	
  ‼ Это НЕ самостоятельный бэкап, а возможность записать поверх основного бэкапа новое состояние.
  Ключевой момент:
  <при воссстановлении>:
    1. сначала берём полный бэкап
	2. последовательно, один за другим, восстанавливаем инкрементальные бэкапы.

  ♦ Дифференциальный бэкап:
    -> почти такой же, как и инкрементальный.
	Разница: 
	  в него записываются не только изменения, сделанные с последнего инкрементального бэкапа, 
	  но и все предыдущие — и так, пока не дойдёт до последнего полного бэкапа.

    Преимущества:
      + экономия времени (достаточно будет восстановить только полный бэкап и затем один дифференциальный,
	  а не всю когорту, как это было бы в инкрементальном)
	
	Недостатки:
	  - требует большего свободного места

Полный бэкап:> 
  * применяется чаще;
  * возможен даже с помощью системных команд

Инкрементальный и дифференциальный бэкапы:>
  * выполняются только с помощью специальных утилит;
  * часто встречаются при работе с БД (pg_dump для PostgreSQL).
  
Инструментарий

  1. rsync
    (grsync - утилита с графическим отображением)
    Особенности:
	  - требует установки утилиты на VM, с которой отправляем бэкап, и на той, куда его отправляем;
	  + по умолчанию присутствует в большей части Linux-систем
	
	Пример резервного копирования:
$ rsync -azvh <b_user>@<ip_сосисочной>:/home/jarservice/sausage-store.jar <b_user>@<ip_бэкапочной>:/mnt/sausage_backup/$(date +"%m-%d-%Y")/ > /var/log/sausage-store.log
# b_user = пользователь_для_бэкапов

#### * полезные атрибуты:

-r    # чтобы работать с папками и их содержимым
--exclude my_file.txt    # чтобы исключить из бэкапа какой-то файл
--delete    # удалять из бэкапа файлы, если они отсутствуют в источнике
-a     # сохранять права и владельцы на файлы
-v     # для визуализации бэкапируемых файлов
-h     # для человекочитаемого вывода информации о размерах отправленного
--dry-run     # для тестового прогона, без реального перемещения файлов
-z     # сжатие данных

Документация: (http://wiki.opennet.ru/Rsync)

PostgreSQL. Синхронизация данных между базами вручную:
rsync -ar /var/lib/pgsql/data/ <пользователь>@<ip_слейва>:/var/lib/pgsql/data/ --exclude postmaster.pid


#####################
# Снапшоты и бэкапы #
#####################

  Снапшоты (снимки состояния виртуальных машин)
    - это одна из разновидностей резервного копирования
  
  В момент создания снапшота виртуальной машины прекращается запись на её диск, а последующие операции записи проводятся уже в отдельный файл.
  НЕ РЕКОМЕНДУЕТСЯ создавать более трёх снапшотов, т.к. последующие будут негативно влиять на производительность работы VM.
  
  