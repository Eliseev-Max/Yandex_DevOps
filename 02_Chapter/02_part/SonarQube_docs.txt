###################
#### SonarQube ####
###################

(‼ Прочитать:
	https://docs.sonarcloud.io/advanced-setup/analysis-parameters/
	https://docs.sonarqube.org/latest/analyzing-source-code/scanners/sonarscanner/

)

После установки платформы SonarQube вы готовы установить сканер и приступить к созданию проектов.
Для этого необходимо установить и настроить СКАНЕР, наиболее подходящий для ваших нужд.
Вы собираете с помощью:
	• Gradle - SonarScanner for Gradle
  • .NET - SonarScanner for .NET
  • Maven - используйте SonarScanner для Maven
  • Jenkins - SonarScanner for Jenkins
  • Azure DevOps - расширение SonarQube для Azure DevOps
  • Ant - SonarScanner for Ant
  • все остальное (CLI) - SonarScanner

Интеграции SonarQube поддерживаются для популярных ALM:
  • GitHub Enterprise и GitHub.com,
  • BitBucket Server,
  • Azure Devops Server и Azure DevOps Services.

‼ НЕ ВКЛЮЧАТЬ антивирусный сканер на машине, где выполняется анализ SonarQube

Проект создается в SonarQube автоматически при первом анализе.
Однако, если вам необходимо задать некоторую конфигурацию проекта до его первого анализа, 
у вас есть возможность создать его через опции администрирования или пункт меню +, который виден пользователям с правами на создание проекта.


>>>> Что дает анализ?

SonarQube может анализировать до 27 различных языков в зависимости от вашего издания.
Результатом этого анализа будут показатели качества и проблемы (случаи, когда были нарушены правила кодирования).
Однако то, что будет проанализировано, зависит от языка:
	• на всех языках "виноватые" данные будут автоматически импортированы из поддерживаемых провайдеров SCM.
	  Git и SVN поддерживаются автоматически.
	  Для других провайдеров требуются дополнительные плагины.
	  
    • на всех языках выполняется статический анализ исходного кода 
	    (файлы Java, программы COBOL и т.д.).
		
    • для некоторых языков может быть выполнен статический анализ скомпилированного кода
	   (файлы .class в Java, файлы .dll в C# и т.д.).


>>>> Все ли файлы будут проанализированы?

По умолчанию в проект во время анализа загружаются ‼ только файлы, которые распознаются вашей редакцией SonarQube.
	Например, если вы используете SonarQube Community Edition, которая включает анализ Java и JavaScript, но не C++,
	→ все файлы .java и .js будут загружены,
	→ а файлы .cpp будут проигнорированы.


>>>> Что насчет ответвлений и запросов на исправление?

Developer Edition добавляет возможность анализа веток и запросов на доработку вашего проекта, а также возможность автоматического оформления запросов на доработку в некоторых интерфейсах ALM.

>>>> Что происходит во время анализа?

Во время анализа
  • данные запрашиваются с сервера,
  • файлы, предоставленные для анализа, анализируются,
  • полученные данные в конце отправляются обратно на сервер в виде отчета, который затем анализируется асинхронно на стороне сервера.

  [ОТЧЁТЫ АНАЛИЗА]→(очередь)→<последовательная обработка> -> обновленные значения не будут видны сразу после того, как журнал анализа покажет завершение.
	
	Отчеты анализа ставятся в очередь и обрабатываются последовательно, поэтому вполне возможно, что в течение короткого периода времени после того, как журнал анализа покажет завершение, обновленные значения не будут видны в вашем проекте SonarQube.

Однако вы сможете понять, что происходит, поскольку на домашней странице проекта справа от его названия появится значок.
Наведите на него курсор, чтобы получить более подробную информацию (и ссылки, если вы вошли в систему с соответствующими правами).
Значок исчезает после завершения обработки, 
‼ но если обработка отчета об анализе по какой-то причине не удалась, значок меняется.

#######################################################

Большинство параметров анализа проекта можно настроить в трех разных местах:
  - в пользовательском интерфейсе;
  - в конфигурационном файле;
  - в командной строке.

  В большинстве случаев описание этих свойств и лучшее место для их установки (при наличии возможности) 
  находится в пользовательском интерфейсе.
  Только параметры, установленные через пользовательский интерфейс, могут быть использованы повторно для последующего анализа,
  и существует структура того, как параметры считываются сканером.

  Иерархия настройки
  
  [Глобальные свойства]
      →<переопределяются>→
	      [Свойства проекта]→
		      →<переопределяются>→
			      [Параметры анализа проекта]→
				      →<переопределяются>→
					      [Анализ/параметры командной строки]
  
Параметры анализа также могут быть заданы в конфигурационном файле внутри вашего проекта.
Используемый файл зависит от вашей установки:
	• Maven Java project: pom.xml
    • Gradle Java project: build.gradle
    • Ant Java project: build.xml
    • Other CI-based analysis: sonar-project.properties
    • Automatic analysis: .sonarcloud.properties

	# Любые настройки, заданные в конфигурационном файле, переопределят настройки, заданные в UI.

Задание конфигурации в командной строке

	Для анализа на основе CI (не автоматического анализа) параметры также могут быть заданы
	в командной строке с помощью опции -D при запуске анализа.
	Это можно сделать с помощью отдельного инструмента командной строки sonar-scanner,
	а также с помощью любого из вариантов, специфичных для инструментов сборки, таких как SonarScanner for Maven и SonarScanner for Gradle.

Параметры хранятся в базе данных

	В базе данных сохраняются только параметры, заданные через пользовательский интерфейс (UI).
	Пример:
	  если переопределить параметр sonar.exclusions через командную строку для конкретного проекта, он не будет сохранен в базе данных.
	  
	Последующие анализы или анализы в SonarLint с режимом Connected Mode все равно будут выполняться с исключениями, заданными в UI,
	и поэтому будут сохранены в базе данных.

	Большинство ключей свойств, отображаемых в UI на глобальном уровне и на уровне проекта, также могут быть установлены в качестве параметров анализа, но параметры, перечисленные ниже, могут быть установлены только во время анализа.

	Параметры, относящиеся к покрытию и выполнению тестов, см. в документации по Покрытию тестов (https://docs.sonarcloud.io/enriching/test-coverage/overview/).
	Параметры, относящиеся к внешним отчетам о проблемах, см. на странице Внешние отчеты анализатора (https://docs.sonarcloud.io/enriching/external-analyzer-reports/).
	
Обязательные параметры
  Аутентификация
    Если псевдогруппа "Anyone" не имеет прав на выполнение анализа:
	→ необходимо предоставить учетные данные пользователя с правом "Выполнить анализ", под которым будет выполняться анализ.

    • sonar.login
        - логин или токен аутентификации пользователя SonarCloud с правом "Выполнять анализ" в проекте.
		
    • sonar.password
        - пароль, который используется вместе с именем пользователя sonar.login. 
		‼ Этот параметр следует ОСТАВИТЬ ПУСТЫМ, если используется токен аутентификации.

  Сервер

    • sonar.host.url
        - URL-адрес сервера SonarCloud.
		Этот URL необходим, поскольку плагин SonarScanner for Maven также работает с локальным продуктом SonarQube, где этот параметр установлен на URL локально установленного сервера.
        По умолчанию: https://sonarcloud.io.
		По умолчанию для Maven, Gradle, .NET и сканеров: https://localhost:9000.

  Конфигурация проекта

    • sonar.projectKey
        - уникальный ключ проекта. Допустимые символы: буквы, цифры, -, _, . и :, по крайней мере, с одной нецифрой.
        По умолчанию: Для проектов Maven, <groupId>:<artifactId>.
    
	• sonar.organization
        - ключ организации, к которой принадлежит проект.
	
	