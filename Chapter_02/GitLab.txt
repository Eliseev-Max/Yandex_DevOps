GitLab

    • GitLab и то, чем он отличается от Jenkins.
    • Импорт проекта из Gitea в GitLab.
    • Создание проекта в GitLab с нуля.
    • Сборка и настройка пайплайна.
    • Настройка Issue Board в GitLab.

GitLab — это инструмент для полного управления циклом жизни ПО.
Возможности:
	► выполнять совместную разработку,
	► собирать и хранить артефакты;
	+ содержит все инструменты в себе, что исключает проблемы с несовместимыми плагинами

Состав GitLab:
  • Репозиторий
		— позволяет хранить код, отслеживать версии, взаимодействовать с коллегами.
  • Wiki
		— встроенный wiki-движок позволяет создавать документацию, описание процессов и многое другое, используя Markdown-разметку.
  • Issue board (а в Jenkins такого нет)
		— позволяет создавать и управлять задачами.
		При этом задачи могут быть привязаны к событиям внутри Gitlab, например, к pull request'ам.
  • Container registry — позволяет организовать публичное или частное хранилище образов контейнеров.
  • Package registry — позволяет организовать публичное или частное хранилище ПО.
  • GitLab CI/CD — позволяет автоматизировать процесс сборки и доставки/установки ПО

Статья: "Битва Jenkins и GitLab CI/CD"
{https://habr.com/ru/companies/ruvds/articles/522334/}

Новый продукт от JetBrains: Space (https://www.jetbrains.com/ru-ru/space/)

Компонент Gitlab CI/CD
	Чтобы настроить CI в Gitlab, нужно:
	  - создать файл .gitlab-ci.yml в корне репозитория (который хранится в репозитории GitLab)
	    в файле должны быть описаны 
		  • этапы (stages) сборки   и
		  • задачи (jobs), которые выполняются на том или ином этапе
	
	Основные концепции:
	  ♦ Pipeline
		  - это конвейер, который описывается в .gitlab-ci.yml и выполняет указанные там действия
		  
	  ♦ Job artifacts
		  - результаты выполнения задач могут сохраняться в виде артефактов
		  
	  ♦ Cache dependencies
		  - для ускорения сборки зависимости могут сохраняться
	  
	  ♦ CI/CD variables
		  - переменные, которые могут использоваться в .gitlab-ci.yml.
		  ‼ Рекомендуется не задавать переменные в самом файле, а определять их, например, для проекта в настройках CI/CD.

Чтобы импортировать проект в GitLab:
	1. Использовать Import project (в разделе Create new project)
	2. Выбрать Repository by URL
	3. Указать
		• имя пользователя (username) и пароль (password) для репозитория, откуда импортируем;
		• имя проекта, задать ему ссылку, указать краткое описание, задать права доступа
	4. После этого GitLab подключается к Gitea и предлагает список проектов для импорта

Создать в GitLab проект с нуля:
	1. Указать имя проекта.
    2. Задать ему ссылку.
    3. Сделать краткое описание.
    4. Задать права доступа.

Если проект был создан на новом удалённом репозитории,
то текущий локальный репозиторий можно перенастроить на работу с новым Git-сервером, тем самым переместив его.
Для этого нужно перенастроить наш remote с gitea на gitlab:

	$ git remote show
	> origin
	
	$ git remote get-url origin
	> http://gitea.praktikum-services.ru/00_student/sausage-store.git
	
	$ git remote set-url origin git@gitlab.praktikum-services.ru:00_student/sausage-store.git
	$ git remote get-url origin
	> git@gitlab.praktikum-services.ru:00_student/sausage-store.git 
	
	# Отправляем изменения в новый репозиторий:
	$ git push


Пайплайн
	Перенос пайплайна из Jenkins в GitLab:
	1. добавить отдельную ветку (release-0.0.1)
	2. создать в новой ветке .gitlab-ci.yml в корне репозитория
	3. описать этапы (stages) и задачи (jobs) для сборки

‼ сборка по умолчанию запускается при коммитах в репозиторий;
‼ для корректной работы CI должны быть настроены раннеры (runners)
	
	Пайплайн в GitLab == Файл .gitlab-ci.yml — набор последовательных этапов (stages), которые состоят из задач (jobs), выполняющихся параллельно. 
	Для каждой задачи можно задать условия запуска и прочие параметры.
	Если какая-то задача завершится с ошибкой, то пайплайн будет считаться проваленным.

---
Содержимое файла .gitlab-ci.yml:

stages:				# два этапа в пайплайне
 - build			# этап "сборка"
 - release			# этап "релиз"
					# описание задач и подключение их к соответствующим этапам:
build_a:
 stage: build

build_b:
 stage: build

release_a:  
 stage: release

release_b:  
 stage: release

#### 

     
             build_a             release_a 
           /         \         /           
     build             release             
           \         /         \          
             build_b             release_b
      


## В данном случае каждый этап содержит в себе 2 задачи,
## причём эти задачи будут выполняться параллельно,
## так как никаких условий для их выполнения мы не указываем.

► Чтобы смастерить пайплайн, нужно выполнить 2 этапа:
	• сборку   и
	• сохранение артефакта
  после чего добавить вариативность и деплой

При создании релиза:
  • упаковывается исходный код;
  • создаётся файл json, который содержит в себе информацию о выпуске;
  • опционально можно добавить описание выпуска;
  • опционально можно прикрепить дополнительные ссылки на ресурсы, связанные с этой версией релиза,
    (например, ссылку на собранный объект, который размещён в хранилище артефактов).

О хранилище артефактов:
	GitLab имеет собственное хранилище, но могут использоваться различные реализации хранилищ артефактов.
	Например, Nexus, он более функционален и поддерживает больше реализаций хранилищ.
	Кроме того, он может выступать в роли кеширующего прокси для внешних пакетов.

Хранение артефактов
	‼ Не всегда артефакт — это конечный продукт.
  Виды артефактов:
	• Docker-образ
	  - docker-registry 
	  (хосновные хранилища в Gitlab: 
	    ○ Package registry,
		○ Container registry,
		○ Infrastructure
	  )
	  # доступ к ним можно получить по ссылке «Packages and Registries» в меню проекта
	  
	• исполняемый бинарный файл
	• пакет (apt, rpm)
	  - apt- (rpm-) репозиторий
	• архив
	...

  artifacts - это то, что мы сохраняем по результатам сборок
 
Токен
	Генерация токена:
	  - для учётной записи;
	    ► "Иконка с профилем" → Edit profile → Access Tokens
	  
	  - для проекта
	    ► (находясь в проекте) Settings → Access Tokens
	
	‼ Задать:
	  • название токена;
	  • срок годности токена;
	  • права на действия внутри учётной записи/проекта


Issue board  - инструмент для отслеживания статуса проекта в GitLab.
	Создать список задач (list) для каждого этапа проекта:
	issue -> boards -> create list
	# расположить в нужном порядке
	
	В каждом списке можно назначить метки (labels) →
	→ удобная фильтрация списка задач по всем спискам.

TO-DO List (расскажет, что нужно делать)
  - включает в себя не только задачи, но и merge-request'ы, которые необходимо поревьюить.
 
Usefull materials:
    Открытый Jenkins — посмотрите, как собирают проекты другие команды.
	{https://ci.xwiki.org/}
    Аналог GitLab — инструмент полного жизненного цикла разработки ПО.
	{https://www.jetbrains.com/ru-ru/space/}
    CI от GitLab — документация.
	{https://docs.gitlab.com/ee/ci/}

########################################
# My personal access token to the API: #
# ys7YsGLf3ftzBzNGvJ4z				   #
########################################
# Feed token:          #
# X7SHA7rZUg3hXGsS7ugJ #
########################
Project access token (name=sausage-store-project):
$PROJECT_TOKEN
_DuiY3FehRDrjeB1xgxP

Как получить ссылку на артефакты, сгенерированные в процессе успешной сборки в Gitlab:

https://gitlab.com/%{namespace}/%{project_name}/-/jobs/artifacts/%{ref}/file/%{path}?job=%{job_name}

Мой_случай:
https://gitlab.praktikum-services.ru/std-017-033/sausage-store/-/jobs/$CI_JOB_TOKEN/artifacts/download?file_type=archive

Пример:
https://gitlab.com/jorgecarleitao/schemaflow/-/jobs/artifacts/master/file/htmlcov/index.html?job=coverage

https://gitlab.praktikum-services.ru/std-017-033/sausage-store/-/jobs/artifacts/release-0.0.1/download?file_type=archive
