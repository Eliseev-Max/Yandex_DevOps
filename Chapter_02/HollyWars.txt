Междоусобные войны
Часть 1. Разработчики и тестеры

Подход Deploy as Code (также известная, как Pipeline-as-Code)
Deploy as Code является более прозрачным подходом и, к тому же, позволяет отслеживать изменения версий кода.
Сейчас так делают все инженерно зрелые команды.
Это более надёжный, удобный и переносимый подход.
В Jenkins для этого используется файл Jenkinsfile, как правило, лежащий в корне репозитория.
Jenkinsfile объясняет CI-системе, какие шаги нужно сделать на языке, схожем с Groovy


pipeline {
    agent any // Выбираем Jenkins агента, на котором будет происходить сборка: нам нужен любой

    triggers {
        pollSCM('H/5 * * * *') // Запускать будем автоматически по крону примерно раз в 5 минут
    }

    tools {
        maven 'maven-3.8.1' 	// Для сборки бэкенда нужен Maven
        jdk 'jdk16' 			// И Java Developer Kit нужной версии
        nodejs 'node-16' 		// А NodeJS нужен для фронта
    }

    stages {
        stage('Build & Test backend') {
            steps {
                dir("backend") { // Переходим в папку backend
                    sh 'mvn package' // Собираем мавеном бэкенд
                }
            }

            post {
                success {
                    junit 'backend/target/surefire-reports/**/*.xml' // Передадим результаты тестов в Jenkins
                }
            }
        }

        stage('Build frontend') {
            steps {
                dir("frontend") {
                    sh 'npm install' 		// Для фронта сначала загрузим все сторонние зависимости
                    sh 'npm run build'		// Запустим сборку
                }
            }
        }
        
        stage('Save artifacts') {
            steps {
                archiveArtifacts(artifacts: 'backend/target/sausage-store-0.0.1-SNAPSHOT.jar')
                archiveArtifacts(artifacts: 'frontend/dist/frontend/*')
            }
        }
    }
}

Статья на Habr: "Jenkins Pipeline. Что это и как использовать в тестировании"
{https://habr.com/ru/companies/yoomoney/articles/538664/}


#### Практика ####
#### Telegram ####
Bot Token: 5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs
https://t.me/+iKjHDqSDzzZkMjU6
id канала: -1001763459775


Вебхук:
Webhook URL: https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage

Тело запроса:
{"chat_id": "Вставить chat_id полученный от куратора", "text": "[Укажите здесь своё имя и фамилию] собрал приложение."}
{"chat_id": "-1001763459775", "text": "Максим Елиссеев собрал приложение!"}

curl -X POST -H 'Content-type: application/json' --data '{"chat_id": "Вставить chat_id полученный от куратора", "text": "[Укажите здесь своё имя и фамилию] собрал приложение."}' https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage

curl -X POST -H 'Content-type: application/json' --data '{"chat_id": "-1001763459775", "text": "Максим Елиссеев собрал приложение!"}' https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage


# -X — указывает на метод запроса (GET, POST, PUT, DELETE и т.д)
# -H — хедер запроса в виде: ключ: значение
# --data — содержимое запроса или по-другому payload
# и в конце сам адрес, на который отправляется запрос
