
Из этого урока вы научитесь:

    Просматривать принадлежность файлов.
    Выдавать права на файлы.
    Выяснять, кто сейчас использует конкретный файл.
    Управлять использованием ресурсов дисковой системы.


процесс обращается к дескриптору -> файл находится в статусе «используется» -> не получится удалить файл.
Понадобится перезапустить процесс и только тогда произойдёт чистка.

Чтобы пользователь user смог получить доступ к файлам,владельцем которых является другой пользователь,
есть несколько решений:
  -> Поменять владельца файлов.
  -> Поменять права на файлы.
  -> Поменять пользователя, с правами которого работает user.

Смена владельца файла:
  $ sudo chown пользователь:группа путь/к/файлу
  # chown == change owner

  $ sudo chown -R  - рекурсивная замена прав файлов (поменять права сразу на все вложенные файлы и папки)

(man df: https://www.opennet.ru/man.shtml?topic=df&category=1&russian=0)


Узнать, сколько места занимает папка на диске (disk usage):
  $ du
    -h — форматирование в человеко-читаемом формате
    -d N — глубина поиска (уровень погружения в каталоги)

Использование du:
  $ du -h -d 10 /var/log | sort -rh
  # список директорий с их размерами в убывающем порядке
  # если некоторые данные недоступны, чтобы увидеть объём занятого пространства, надо вызвать команду с привилегиями суперадминистратора

(man du: https://www.opennet.ru/man.shtml?topic=du&category=1&russian=0)


Для более удобного анализа дискового пространства существует утилита ncdu
  + она имеет интерактивный псевдографический интерфейс

  Просканировать и вывести данные о конкретной директории (например, /var/log):
    $ ncdu /var/log

  Количество символов # помогает визуально определить, какие файлы и каталоги занимают больше всего места.
  Первый столбец может содержать дополнительную информацию, например:
    ! — ошибка при чтении директории
    . — ошибка при чтении поддиректории, то есть указанный размер подсчитан без учёта этой директории
    e — пустая директория
    H — объект уже был учтён (жёсткая ссылка)

(ncdu documentation: https://dev.yorhel.nl/ncdu/man)

Подсчёт истинного размера директории может быть неверным: -> в поддиректории могут быть точки монтирования.
Исключить точки монтирования из анализа: + параметр -x.


Утилита lsof
  - выводит список открытых файлов, сокетов и каналов
  [без параметров]: ->  список всех открытых файлов для текущих активных процессов

  Пример:

  $ lsof
COMMAND     PID   TID TASKCMD         USER   FD      TYPE             DEVICE  SIZE/OFF       NODE NAME
init          1                       root  cwd       DIR              254,0       241         96 /
init          1                       root  rtd       DIR              254,0       241         96 /
init          1                       root  txt       REG              254,0     52800   67750339 /sbin/init
init          1                       root  mem       REG              254,0   1818704   67742326 /lib64/libc-2.33.so
init          1                       root  mem       REG              254,0    202144   67742344 /lib64/ld-2.33.so
init          1                       root   10u     FIFO               0,21       0t0        400 /run/initctl

  COMMAND — процесс (команда), которая использует файл
  PID — идентификатор процесса
  USER — владелец процесса
  FD — дескриптор файла:
    cwd — рабочая директория
    rtd — директория root
    txt — исполняемый файл
    mem — область памяти
    число — это номер дескриптора файла, используемого процессом
    u — файл открыт с правами на чтение и запись
    r — файл открыт с правами на чтение
    w — файл открыт с правами на запись с частичной блокировкой файла
    W — файл открыт с правами на запись с блокировкой всего файла

  TYPE — тип файла:
    REG — файл
    DIR — директория
    FIFO — именованные каналы

  DEVICE — номер устройства, на котором находится файл
  SIZE/OFF — размер
  NODE — номер inode, индексного дескриптора
  NAME — имя файла


  $ lsof +D /tmp/test			# $vi /tmp/test/test.txt  + Ctrl+z == bg process

>> Более подробная информация о процессе:
    $ lsof -p <PID>

# ! Редактор vi использует файлы типа: .filename.swp для хранения временной версии файла
# Удалим файл /tmp/test/.test.txt.swp 
# А затем запустим lsof:

$ lsof | grep deleted | grep test.txt.swp
vim        30151                      makky    6u      REG              254,0     12288   3058807 /tmp/test/.test.txt.swp (deleted)

Файл всё ещё находится на месте, поскольку используется процессом vi
Если закрыть редактор vi (предварительно вернув его из фонового режима: fg), 
файл исчезает окончательно, потому что файловый дескриптор из /proc уничтожается вместе с процессом.

  $ lsof -a +L1 /tmp/test
  # покажет только удалённые файлы в конкретной директории,
  # которые занимают память из-за того, что процесс не отпустил дескрипторы.

(man lsof: https://linux.die.net/man/8/lsof)


Дисковая система

