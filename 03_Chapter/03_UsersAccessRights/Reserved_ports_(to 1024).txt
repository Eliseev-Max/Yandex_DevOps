Why are the first 1024 ports restricted to the root user only?

source: https://unix.stackexchange.com/questions/16564/why-are-the-first-1024-ports-restricted-to-the-root-user-only
https://stackoverflow.com/questions/10182798/why-are-ports-below-1024-privileged
https://serverfault.com/questions/38461/is-there-still-a-reason-why-binding-to-port-1024-is-only-authorized-for-root-o


Предположим, вы обмениваетесь данными с компьютером на порту <1024, и вы знаете, что этот компьютер работает под управлением какого-то варианта unix. Тогда вы знаете, что служба, работающая на этом порту, одобрена системным администратором: она запущена от имени root, или, по крайней мере, должна быть запущена от имени root.

В широком, диком мире Интернета это не имеет значения. Большинство серверов администрируется теми же людьми, что и работающие на них службы; вы не будете доверять root'у больше, чем другим пользователям.

На многопользовательских машинах, особенно в локальной сети, это может иметь значение. Например, во времена до гражданской криптографии популярным методом запуска команд командного интерпретатора на другой машине был rsh (remote shell); вы могли использовать аутентификацию по паролю, или вы могли аутентифицироваться, просто доказав, что вы пользователь X на машине A (при этом машина B знала, что X@A может войти в систему как X@B без пароля). Как это доказать? Клиент rsh имеет права root и использует порт с номером <1024, поэтому сервер знает, что клиент, с которым он разговаривает, заслуживает доверия и не будет лгать о том, какой пользователь на машине A вызывает его. Аналогично NFS была разработана для прозрачности в отношении пользователей и разрешений, поэтому обычной конфигурацией было то, что в локальной сети каждая машина использовала одну и ту же базу данных пользователей, и пользователь N в A, монтирующий файловые системы с сервера B, получал разрешения пользователя N в B. Опять же, тот факт, что клиент NFS приходит с порта с номером <1024, доказывает, что root в A проверил клиента NFS, который должен убедиться, что если он передает запрос, якобы от пользователя N, то этот запрос действительно от пользователя N.

Неавторизованные пользователи не могут запускать серверы на низких портах - это еще одно преимущество, но не главное. В те времена спуфинг был новинкой, и пользователи, запускающие поддельные серверы, в любом случае были бы быстро уничтожены бдительными администраторами.