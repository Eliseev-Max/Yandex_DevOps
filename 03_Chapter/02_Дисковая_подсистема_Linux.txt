Дисковая подсистема Linux

Из этого урока вы научитесь:
  * Работать с разметкой дисков.
  * Ловко обращаться с таблицами разделов.
  * Создавать директории.
  * Использовать утилиту lvm для взаимодействия с дисками.
  * Анализировать диски через утилиту lsblk.

{ из fdisk(8) man page:	
# Жесткие диски могут быть разделены на один или несколько логических дисков, называемых разделами (partitions).
# Это разделение описывается в таблице разделов, находящейся в секторе 0 диска.
# В мире BSD говорят о "дисковых фрагментах" (disk slices) и "метке диска" (disklabel).
}

Утилита  lsblk
  - вывести общий список дисков на машине (в т.ч. и добавленных)
  $ lsblk -f  = вывести список дисков и файловые системы на дисках
  
  Вывод команды:
  NAME | FSTYPE | LABEL | UUID |			FSAVAIL | FSUSE% | MOUNTPOINT
  
  • NAME — имя диска
  • FSTYPE — тип файловой системы
  • LABEL — метка, может содержать человекочитаемое описание диска
  • UUID — физический ID устройства
  • FSAVAIL — место на диске, доступное для файловой системы (обычно меньше физического размера диска)
  • FSUSE — сколько места на диске занято
  • MOUNTPOINT — точка монтирования
 
Пример:

$ lsblk -f
NAME FSTYPE LABEL UUID                                 FSAVAIL FSUSE% MOUNTPOINT
vda                                                                   
├─vda1
│                                                                     
└─vda2
     ext4         82afb880-9c95-44d6-8df9-84129f3f2cd1    7.6G    18% /
vdb				#### новый диск, не размечен

Типы таблиц разметки разделов:
  • MBR (Master Boot Record)  - для устройств с BIOS
    - традиционная структура разметки дисков;
    - содердит 2 типа разделов:
    ○ primary (Primary partition, первичный раздел)
	    -- их может быть всего 4
    ○ extended (Extended partition, расширенный раздел)
	    -- можно разбить на любое количество логических дисков
		
  • GPT (GUID Partition Table)  - для устройств с UEFI
    - новый стандарт разметки, часть стандарта UEFI
	- допускает неограниченное количество разделов
	- но есть ограничения со стороны ОС (Windows позволяет создать <= 128 разделов)
	- хранит копию данных раздела (позволяя восстановить их в случае повреждения основного заголовка GPT)
	- также хранит значения контрольной суммы для проверки, что данные не повреждены


Утилита fdisk
  - утилита для работы с таблицей разделов диска;
  - позволяет вывести информацию о дисках (выводит куда больше информации, чем lsblk)

Пример работы утилиты fdisk:

	$ sudo fdisk -l
	Disk /dev/vda: 10 GiB, 10737418240 bytes, 20971520 sectors
	Units: sectors of 1 * 512 = 512 bytes
	Sector size (logical/physical): 512 bytes / 4096 bytes
	I/O size (minimum/optimal): 4096 bytes / 4096 bytes
	Disklabel type: gpt
	Disk identifier: 8E70400A-DD3F-443D-95C1-844A5A72302B
	Device     Start      End  Sectors Size Type
	/dev/vda1   2048     4095     2048   1M BIOS boot
	/dev/vda2   4096 20971486 20967391  10G Linux filesystem
	Disk /dev/vdb: 4 GiB, 4294967296 bytes, 8388608 sectors
	Units: sectors of 1 * 512 = 512 bytes
	Sector size (logical/physical): 512 bytes / 4096 bytes
	I/O size (minimum/optimal): 4096 bytes / 4096 bytes


Разметка нового диска с помощью fdisk:
  $ sudo fdisk /dev/vdb
:>
Welcome to fdisk (util-linux 2.34).
Changes will remain in memory only, until you decide to write them.
Be careful before using the write command.

Device does not contain a recognized partition table.
Created a new DOS disklabel with disk identifier 0x30cf485a.

Command (m for help): 

  # создадим таблицу GPT (клавиша g):
:>
Created a new GPT disklabel (GUID: E83C9D88-AB63-3341-AB6F-2E7FAC0FC15D).

  # Создадим пару разделов размером 1 ГБ, а ещё 2 ГБ оставим неразмеченными:
  
Command (m for help): n                # создать новый раздел
Partition number (1-128, default 1):
First sector (2048-8388574, default 2048):
Last sector, +/-sectors or +/-size{K,M,G,T,P} (2048-8388574, default 8388574): +1G

Created a new partition 1 of type 'Linux filesystem' and of size 1 GiB.

#### Создали первый раздел размером 1 Гб ####
#### Приступим к созданию второго раздела ####

Command (m for help): n       
Partition number (2-128, default 2):
First sector (2099200-8388574, default 2099200):
Last sector, +/-sectors or +/-size{K,M,G,T,P} (2099200-8388574, default 8388574): +1G

Created a new partition 2 of type 'Linux filesystem' and of size 1 GiB.

Command (m for help): w            # --wipe, стирает сигнатуры ФС, RAID и таблицы разделов с устройства, чтобы избежать возм. коллизий.
The partition table has been altered.        # Таблица разделов была изменена
Calling ioctl() to re-read partition table.
Syncing disks.

  # Теперь необходимо перезагрузить машину, чтобы таблица разделов тоже перезагрузилась.
  # Но мы воспользуемся утилитой partprobe, она перегружает таблицу без рестарта.

$ sudo partprobe
$ lsblk
NAME   MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
vda    252:0    0  10G  0 disk
├─vda1 252:1    0   1M  0 part
└─vda2 252:2    0  10G  0 part /
vdb    252:16   0   4G  0 disk
├─vdb1 252:17   0   1G  0 part
└─vdb2 252:18   0   1G  0 part

  # У нас 2 диска по 1 ГБ.
  # Теперь можно создать файловую систему и примонтировать их


Что делать, если на одном из дисков закончилось место, и нужно расширить примонтированный диск с данными?

  Используем lvm
  
  lvm (Logical Volume Manager)
  - это система управления логическими дисками на одном или нескольких физических дисках без переразметки физических дисков.
  LVM позволяет изменять размеры дисков, перемещать их без остановки процессов или размонтирования файловых систем.
  То есть lvm даёт возможность добавить ещё диск или расширить существующие lvm разделы на лету.

Преимущества использования логических дисков под управлением lvm перед разделами физического диска:

  • Изменение размера: можно расширить или уменьшить раздел lvm без форматирования логических дисков.
  • Расширяемость пространства: lvm позволяет увеличить доступное пространство, добавляя новые физические диски в пул lvm.
  • Зеркалирование данных: lvm позволяет вести запись на несколько дисков одновременно,
    благодаря чему 
	→ повышается производительность работы системы 
	→ появляется возможность дублировать данные на несколько логических дисков.
	
  • Резервное копирование: lvm позволяет «заморозить» логический диск во время работы системы и сделать копию.
  • Читаемые имена: логическим разделам можно давать любые понятные имена, → легче понимать предназначение раздела.


LVM управляет тремя сущностями:
  • Physical Volume (PV) - физический раздел (может включать в себя несколько физических дисков) 
  • Volume Group (VG) - группа физических дисков
  • Logical Volume (LV) - логический диск

## Создадим PV для обоих разделов на новом диске:
$ sudo pvcreate /dev/vdb1 /dev/vdb2
  Physical volume "/dev/vdb1" successfully created.
  Physical volume "/dev/vdb2" successfully created.

$ sudo pvs								# вывести краткую информацию о доступных физических дисках lvm
  PV         VG Fmt  Attr PSize PFree
  /dev/vdb1     lvm2 ---  1.00g 1.00g
  /dev/vdb2     lvm2 ---  1.00g 1.00g

$ sudo pvdisplay						# вывести подробную информацию об этих дисках.
  "/dev/vdb1" is a new physical volume of "1.00 GiB"
  --- NEW Physical volume ---
  PV Name               /dev/vdb1
  VG Name               
  PV Size               1.00 GiB
  Allocatable           NO
  PE Size               0   
  Total PE              0
  Free PE               0
  Allocated PE          0
  PV UUID               w68zDA-hwuX-1bqD-sMir-cAvx-Q1ji-hMwfVz

  "/dev/vdb2" is a new physical volume of "1.00 GiB"
  --- NEW Physical volume ---
  PV Name               /dev/vdb2
  VG Name               
  PV Size               1.00 GiB
  Allocatable           NO
  PE Size               0   
  Total PE              0
  Free PE               0
  Allocated PE          0
  PV UUID               Es91ky-P1bv-PbfW-2CnW-AAga-eu0i-Hz2mGe

## Создадим виртуальную группу разделов lvm (VG):

    $ sudo vgcreate my_vg /dev/vdb1 /dev/vdb2
    Volume group "my_vg" successfully created

$ sudo vgs								# вывести краткую информацию о доступных группах логических дисков.
  VG    #PV #LV #SN Attr   VSize VFree
  my_vg   2   0   0 wz--n- 1.99g 1.99g
$ sudo vgdisplay						# вывести подробную информацию о группах
  --- Volume group ---
  VG Name               my_vg
  System ID             
  Format                lvm2
  Metadata Areas        2
  Metadata Sequence No  1
  VG Access             read/write
  VG Status             resizable
  MAX LV                0
  Cur LV                0
  Open LV               0
  Max PV                0
  Cur PV                2
  Act PV                2
  VG Size               1.99 GiB
  PE Size               4.00 MiB
  Total PE              510
  Alloc PE / Size       0 / 0   
  Free  PE / Size       510 / 1.99 GiB
  VG UUID               0ESNYO-msz2-PS70-GN13-cwnr-xf5b-0jxdsf

    ► VG Name — имя группы
    ► VG Size — размер группы
    ► PE Size — это размер чанка.
	  (Чанк — это кусочек дискового пространства, в которые производится запись данных и из которых состоит lvm диск.
	  Это блок, если проводить аналогию с файловой системой, или кластер, если проводить аналогию с файловыми системами Windows)
	  
    ► Total PE — количество чанков в группе
    ► Alloc PE / Size — занятое место
    ► Free PE / Size — свободное место


## Создадим логический раздел (виртуальный раздел) используя группу my_vg:

$ sudo lvcreate -l +100%FREE -n my_vol my_vg
  Logical volume "my_vol" created.

$ sudo lvs                # сообщить информацию о логических томах
  LV     VG    Attr       LSize Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
  my_vol my_vg -wi-a----- 1.99g          

$ sudo lvdisplay
  --- Logical volume ---
  LV Path                /dev/my_vg/my_vol            # Расположение нового логического раздела
  LV Name                my_vol
  VG Name                my_vg
  LV UUID                7l8Dgk-z4NY-RRzC-Gyb5-8luy-kVOZ-4s6iyL
  LV Write Access        read/write
  LV Creation host, time fhmo1o2bgbo5cmvtr29m, 2021-09-25 19:45:04 +0000
  LV Status              available
  # open                 0
  LV Size                1.99 GiB
  Current LE             510
  Segments               2
  Allocation             inherit
  Read ahead sectors     auto
  - currently set to     256
  Block device           253:0

  -l указать относительное свободное место 
  -L — указать конкретный размер нового LV.
# Опции --size и --extents являются альтернативными методами указания размера.
# Общее количество используемых физических экстентов будет больше, если для уровней RAID требуется избыточность данных.

Выберите команду, которая
  - создаст логический раздел с именем sales_data,
  - типом linear,
  - размером 50% от свободного места 
  - в виртуальной группе dataVG объёмом 4 ГБ

  $ lvcreate -n sales_data --type=linear -l 50%FREE dataVG
    -n|--name <string>  = задает имя нового LV. 
						Если имя не указано, по умолчанию генерируется имя "lvol#",
						где # - номер, генерируемый LVM.
	--type linear|striped|snapshot|mirror|raid|thin|cache|vdo|thin-pool|cache-pool|vdo-pool   = 
		  = тип LV, также известный как "тип сегмента"(segment type) или "segtype".
		  Конкретные способы использования этих типов см. в описаниях использования.
		  
	-l|--extents <Number[PERCENT]>  = Указывает размер нового LV в логических экстентах.


Типы файловых систем

  extX
    ext расшифровывается как Extended File System, расширенная файловая система.
    Сюда входят ext, ext2, ext3, ext4.
    Эти файловые системы традиционно используются в Linux.
    Ext3 и ext4 обратно совместимы с ext2.
    Размер ext4 может быть как увеличен, так и уменьшен.

  xfs
    Некоторые дистрибутивы Linux (например, Red Hat) предпочитают использовать XFS.
    Она рассчитана на работу с большими дисками.
    Скорость работы в таком случае выше, чем у ext4.
    Размер xfs может быть увеличен, но не может быть уменьшен.

  ntfs, fat32
    Файловые системы Windows, которые поддерживаются в Linux.


Все файловые системы создаются утилитой mkfs.<FS_NAME>
  (**mkfs.ext4**, **mkfs.xfs**, ..). 

Можно создать файловую систему ext4, чтобы увеличивать и уменьшать её размер в будущем:
>:
$ sudo mkfs.ext4 /dev/my_vg/my_vol

mke2fs 1.45.5 (07-Jan-2020)
Creating filesystem with 522240 4k blocks and 130560 inodes
Filesystem UUID: 12efe748-8763-4a1d-b674-2daf34015cef
Superblock backups stored on blocks:
    32768, 98304, 163840, 229376, 294912

Allocating group tables: done                            
Writing inode tables: done                            
Creating journal (8192 blocks): done
Writing superblocks and filesystem accounting information: done

Диск доступен ещё так:
  /dev/mapper/my_vg-my_vol
Нужно примонтировать его в директорию /mnt:
  $ sudo mount /dev/my_vg/my_vol /mnt/
  $ sudo df -h
  Filesystem                Size  Used Avail Use% Mounted on
  udev                      966M     0  966M   0% /dev
  tmpfs                     199M  824K  198M   1% /run
  /dev/vda2                 9.8G  4.2G  5.2G  45% /
  tmpfs                     994M     0  994M   0% /dev/shm
  tmpfs                     5.0M     0  5.0M   0% /run/lock
  tmpfs                     994M     0  994M   0% /sys/fs/cgroup
  tmpfs                     199M     0  199M   0% /run/user/1000
  /dev/mapper/my_vg-my_vol  2.0G  6.0M  1.9G   1% /mnt


/etc/fstab
  Команда mount монтирует диск только в рантайме.
  Чтобы диск примонтировался в директорию после перезагрузки хоста, необходимо прописать его в файл /etc/fstab.
  Сейчас содержимое файла /etc/fstab выглядит так:

  # /etc/fstab: static file system information.
  #
  # Use 'blkid' to print the universally unique identifier for a
  # device; this may be used with UUID= as a more robust way to name devices
  # that works even if disks are added and removed. See fstab(5).
  #
  # <file system> <mount point>   <type>  <options>       <dump>  <pass>
  # / was on /dev/vda2 during installation
  UUID=82afb880-9c95-44d6-8df9-84129f3f2cd1 /               ext4    errors=remount-ro 0       1
  /dev/vdc /var/jarservice xfs defaults 0 0 

---

После рестарта монтируется только корневая директория и /var/jarservice (указанная в файле fstab)

  - Добавим строку:
    /dev/mapper/my_vg-my_vol                  /mnt            ext4    defaults 1 2

  - Теперь примонтируем записи в fstab:
    $ sudo mount -a

Итог: Мы получили директорию, в которую можно записать 2 ГБ данных.
Но в реальности это 2 раздела, которые могли бы быть на разных дисках.

Теперь запишем в директорию произвольные данные:
  # dd - утилита UNIX, производящая копирование файла, преобразование и форматирование в соответствии с операндами.
  # С помощью dd можно выполнить копирование данных из одного места в другое на двоичном уровне.
  # Она может скопировать CD/DVD диск, раздел на диске или даже целый жесткий диск.

$ sudo dd if=/dev/zero of=/mnt/payload bs=1M count=2048
dd: error writing '/mnt/payload': No space left on device
1954+0 records in
1953+0 records out
2048802816 bytes (2.0 GB, 1.9 GiB) copied, 230.615 s, 8.9 MB/s

$ sudo df -h
/dev/mapper/my_vg-my_vol         2.0G  2.0G     0 100% /mnt

#### ! Ошибка записи
## пытались записать ровно 2 ГБ,
## но lvm забирает под свою мета-информацию некоторое количество диска,
## поэтому, объединив 2 диска по 1 ГБ, мы получили диск немного меньших размеров

## Как добавить в систему 2 разных диска, не используя LVM ##
# 1. Создать на каждом диске файловую систему командой mkfs.<fs_type>
# 2. Примонтировать каждый диск в отдельную директорию (например, /mnt/1, /mnt/2)
# !!! диски нужно прописывать в /etc/fstab по UUID, а не по названию раздела, как в LVM
#### Как обращаться к таким директориям? ####
# Для этого существуют специальные файловые системы #

Если место на логическом диске закончилось, нужно:
  1. добавить ещё один диск в lvm группу
  2. расширить существующий логический диск


Расширение раздела lvm
  Добавим ещё один раздел на физическом носителе таким образом, чтобы он занял всё оставшееся место на диске.
  1) Добавим в виртуальную группу my_vg:

  $ sudo vgextend my_vg /dev/vdb3
    Volume group "my_vg" successfully extended

  $ sudo vgs
    VG    #PV #LV #SN Attr   VSize  VFree
    my_vg   3   1   0 wz--n- <3.99g <2.00g

  2) Теперь увеличим наш логический диск lvm:
      $ sudo lvextend -l +100%FREE my_vg/my_vol
      Size of logical volume my_vg/my_vol changed from 1.99 GiB (510 extents) to <3.99 GiB (1021 extents).
      Logical volume my_vg/my_vol successfully resized.
  # Посмотрим, что получилось:

  $ sudo lsblk
NAME             MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
vda              252:0    0  10G  0 disk
├─vda1           252:1    0   1M  0 part
└─vda2           252:2    0  10G  0 part /
vdb              252:16   0   4G  0 disk
├─vdb1           252:17   0   1G  0 part
│ └─my_vg-my_vol 253:0    0   4G  0 lvm  /mnt
├─vdb2           252:18   0   1G  0 part
│ └─my_vg-my_vol 253:0    0   4G  0 lvm  /mnt
└─vdb3           252:19   0   2G  0 part
  └─my_vg-my_vol 253:0    0   4G  0 lvm  /mnt

$ sudo df -h
Filesystem                Size  Used Avail Use% Mounted on
/dev/mapper/my_vg-my_vol  2.0G  2.0G     0 100% /mnt        # система по-прежнему видит только 2 Гб

  3) Необходимо расширить файловую систему

  $ sudo resize2fs /dev/my_vg/my_vol
  resize2fs 1.45.5 (07-Jan-2020)
  Filesystem at /dev/my_vg/my_vol is mounted on /mnt; on-line resizing required
  old_desc_blocks = 1, new_desc_blocks = 1
  The filesystem on /dev/my_vg/my_vol is now 1045504 (4k) blocks long.

  $ sudo df -h
  Filesystem                Size  Used Avail Use% Mounted on
  /dev/mapper/my_vg-my_vol  3.9G  2.0G  1.8G  52% /mnt

Итог: 3 диска объединены в один


Уменьшение размеров диска LVM

  !! Это опасная и нежелательная операция:
    - неверно указанные размеры нового логического диска lvm могут повредить ваши данные;
    - уменьшение размера требует отключения файловой системы

  1) Отмонтируем раздел.
    !! в момент, когда мы отмонтируем раздел, не стоит находиться в его папке
  
      $ sudo df -h
      Filesystem                Size  Used Avail Use% Mounted on
      /dev/mapper/my_vg-my_vol  3.9G  2.0G  1.8G  52% /mnt

      $ sudo umount /mnt

  2) Проверим файловую систему на ошибки и уменьшим логический диск lvm на 500 МБ:

    $ sudo fsck.ext4 -f /dev/my_vg/my_vol

    e2fsck 1.45.5 (07-Jan-2020)
    Pass 1: Checking inodes, blocks, and sizes
    Pass 2: Checking directory structure
    Pass 3: Checking directory connectivity
    Pass 4: Checking reference counts
    Pass 5: Checking group summary information
    /dev/my_vg/my_vol: 12/261120 files (0.0% non-contiguous), 526848/1045504 blocks

    $ sudo lvreduce -L-500M /dev/my_vg/my_vol
      WARNING: Reducing active logical volume to 3.50 GiB.
      THIS MAY DESTROY YOUR DATA (filesystem etc.)
    Do you really want to reduce my_vg/my_vol? [y/n]: y
      Size of logical volume my_vg/my_vol changed from <3.99 GiB (1021 extents) to 3.50 GiB (896 extents).
      Logical volume my_vg/my_vol successfully resized.

    $ sudo resize2fs -f /dev/my_vg/my_vol
    resize2fs 1.45.5 (07-Jan-2020)
    Resizing the filesystem on /dev/my_vg/my_vol to 917504 (4k) blocks.
    The filesystem on /dev/my_vg/my_vol is now 917504 (4k) blocks long.

  !! Размер свободного места на логическом диске lvm должен быть точно больше размера уменьшаемого места,
  иначе часть данных потеряется.

  3) Монтируем раздел снова

      $ sudo mount -a
      $ sudo df -h
      Filesystem                Size  Used Avail Use% Mounted on
      /dev/mapper/my_vg-my_vol  3.5G  2.0G  1.4G  60% /mnt

Итог: Размер уменьшился и наш файл payload на месте.


"Трюки" с LVM:
  
  Перемещение раздела (при переносе со старого на новый диск):

    $ pvmove -n my_vol /dev/sda1 

  Резервное копирование логического раздела:

    $ lvcreate -s -n snap -L 5g my_vg/my_vol 

  Откат:

    $ lvconvert --merge my_vol/snap 

  Удаление:

    $ lvremove /dev/my_vg/my_vol 
