Виртуализация

Из этого урока вы научитесь:

    Устанавливать и настраивать виртуальные машины.
    Разбираться в гипервизорах.
    Ещё одному применению Infrastructure as Code.
    Читать и редактировать Vagrantfile.

«Виртуализация — это когда вместо физической версии создаётся имитированная или виртуальная вычислительная среда.
Виртуализация часто включает в себя созданные компьютером версии
  * аппаратных средств,
  * операционных систем,
  * устройств хранения
  и многое другое.
Это позволяет организациям разделить один компьютер или сервер на несколько виртуальных машин.»

Что даёт виртуализация:
  + возможность более эффективно использовать мощности сервера;
  + изолирование приложений друг от друга.
  + удобство добавления/убавления ресурсов работающим виртуальным машинам
  + возможность миграции
►► Надёжность системы на виртуальных машинах выше;
►► Трудозатраты на поддержание работоспособности ниже.

Гипервизоры
  есть 2 типа гипервизоров:
    1. Аппаратные — когда гипервизор ставится напрямую на железку и управляет созданием виртуалок.
    3. Программные — когда гипервизор ставится в ОС и, кроме обычных приложений, ты можешь управлять ещё и виртуальными машинами

Наиболее известные гипервизоры:
  • Microsoft HYPER-V
    - этот гипервизор интегрирован в ядро Windows
	
  • VMWARE
    - проприетарный гипервизор с отличной репутацией и соответствующей ценой
	
  • KVM+QEMU(OVIRT(RHEV))
    - Гипервизор, доступный практически на любом хосте с Linux
	
  • Citrix XenServer
    - Продвинутый аппаратный гипервизор, встроенный в ядро Linux
	
  • Proxmox

Установка VirtualBox на Ubuntu
  $ sudo apt-get update -y
  $ sudo apt-get install virtualbox virtualbox-ext-pack -y


Инфраструктура как код (IAC, IAaC от англ. Infrastructure as a Code)
  — подход к управлению и описанию инфраструктуры через конфигурационные файлы, а не через ручное редактирование конфигураций на серверах.
  Процесс настройки инфраструктуры становится аналогичен процессу программирования ПО.
  Границы между написанием приложений и созданием сред для этих приложений стираются.
  
  Используя IAC мы получаем много преимуществ:
    1. Нет необходимости ручной настройки.
    2. Настройка (поднятие) инфраструктуры занимает на порядок меньше времени.
    3. Масштабируемость: один инженер с помощью одного и того же кода может управлять огромным количеством машин.
    4. Возможность использовать систему контроля версий для отслеживания изменений в инфраструктуре.
    5. Воспроизводимость: инфраструктура, поднятая с помощью скриптов всегда будет 100% идентична.
    6. Ценность элемента инфраструктуры падает: проще поднять новую, чем восстанавливать старую

# Статья Фаулера про "сервера-фениксы" и "сервера-снежинки":  https://martinfowler.com/bliki/SnowflakeServer.html
  (сервера-фениксы - сервера, восстающие "из пепла", подобно Фениксу;
   сервера-снежинки - сервера, каждый из которых уникален, как снежинки
  )


Vagrant — это продукт компании HashiCorp, который позволяет в качестве оболочки управлять системами виртуализации.
"в качестве оболочки" = «под капотом» может быть любой гипервизор, а управлять им мы будем одними и теми же командами через Vagrant.

В основе Vagrant лежат box'ы. Box'ы ты можешь делать сам или качать с сайта Vagrant'а.
(https://app.vagrantup.com/boxes/search)

Некоторые команды Vagrant:
  • port
    - позволяет вывести наружу все проброшенные из виртуалки порты

  • reload
    - перезагружает виртуалку из текущей конфигурации

  • share
    - позволяет с помощью программы ngrok создать временный url, доступный всему интернету
	(удобно для всяких тестовых запусков)

  • snapshot
    - сохранить текущее состояние виртуалки и потом восстановить его с помощью restore

  • restore
    - позволяет восстановить состояние сохраненное с помощью snapshot

  • stop
    - останавливает виртуальную машину (буквально поставит её на паузу)


Установка Vagrant

$ curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
$ sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
$ sudo apt-get update && sudo apt-get install vagrant

## Поднимем простенькую виртуальную машину
## Создадим тестовую папку

$ mkdir -p vagrant
$ cd vagrant

## Выполним в ней процесс инициализации, в ходе которого Vagrant создаст конфигурационный файл Vagrantfile:

$ vagrant init generic/ubuntu2010

## Создался Vagrantfile с примерно таким содержимым, которое описывает наше желание 
## создать виртуальную машину на базе Ubuntu 20.10:

Vagrant.configure("2") do |config|
  config.vm.box = "generic/ubuntu2010"
end

## запустим виртуальную машину с атрибутом, отвечающим за используемый провайдер:

$ vagrant up --provider=virtualbox

## Запрос статуса (чтобы увидеть список всех запущенных виртуальных машин):

$ vagrant status

## Можно логиниться в новую виртуальную машину с помощью vagrant ssh
## Пароль для sudo = vagrant

## ‼ Удалить виртуальную машину:
$ vagrant destroy -f

(Справка по командам CLI:  https://developer.hashicorp.com/vagrant/docs/cli)

