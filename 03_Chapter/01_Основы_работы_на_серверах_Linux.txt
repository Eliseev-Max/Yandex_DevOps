Основы работы на серверах Linux, работа с командной строкой

Из этого урока вы научитесь:
  • Управлять правами процессов и пользователями в системе.
  • Понимать разницу между sudo и su, уметь работать в системе без root.
  • Просматривать переменные окружения процесса.
  • Быстро перемещаться по истории и конструкции команд.
  • Самостоятельно запускать/завершать процесс в различных режимах.
  • Прописывать несложные юнит-файлы.
  • Просматривать логи процесса.


Хорошим тоном считается запускать сервисы не из-под пользователя root, а из-под сервисных аккаунтов.

Работа с пользователем
  Базовые команды:
    • useradd  -  создать новых пользователей.
	  # useradd [options] <new_user>
		Требует прав суперадминистратора.
		При создании пользователей командой useradd автоматически создаются
		  - одноимённая группа
		  - (в некоторых системах) домашний каталог пользователя.
	## в Debian рекомендуется использовать  adduser
		  
    • groupadd — поможет создать отдельную группу.
	## addgroup - в Debian
	
    • passwd — изменяет пароль пользователя.
    • usermod — для других изменений пользователя  (смена группы или домашнего каталога, может быть, блокировки)
    • userdel — удаляет пользователя.
	
  Информация о пользователях (в том числе сервисных) содердится в файле:
    /etc/passwd
	
  В файле /etc/shadow хранятся хеши паролей пользователей. Доступ имеет только суперпользователь.
  
  Залогиниться под другим пользователем прямо в shell:
    $ su <username>
  чаще используют такую запись:
    $ su - <username>		# воссоздать переменные окружения другого пользователя.

  Если нужно запустить команду разово:
    $ su -c 'id'
    Password:
    uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel),11(floppy),20(dialout),26(tape),27(video)
	
  sudo
  - это расширенный аналог su.
  Команда позволяет настроить доступы отдельно для каждого пользователя или группы.
  Доступы описаны в файле /etc/sudoers
  Вносить изменения в /etc/sudoers ТОЛЬКО с помощью visudo

	
Содержимое файла настроек /etc/sudoers:

# User privilege specification
root    ALL=(ALL:ALL) ALL

# Members of the admin group may gain root privileges
%admin ALL=(ALL) ALL

# Allow members of group sudo to execute any command
%sudo    ALL=(ALL:ALL) ALL

# See sudoers(5) for more information on "#include" directives:
#includedir /etc/sudoers.d

--- Пояснение ---
  Настройки пользователя root:
  ALL=(ALL:ALL) ALL
    • Первое ALL = данное правило применяется ко ВСЕМ ХОСТАМ;
	• Второе ALL = указанный ПОЛЬЗОВАТЕЛЬ может запускать команды от лица ВСЕХ ПОЛЬЗОВАТЕЛЕЙ
	• Третье ALL = указанный ПОЛЬЗОВАТЕЛЬ может запускать команды от лица всех ГРУПП
	• Четвёртое ALL = данные правила применяются ВСЕМ КОМАНДАМ

  $ sudo -l → список разрешённых команд для пользователя.
  

???????????????????????????????????????????????????????????????????
? Что нужно прописать в папке /etc/sudoers.d/,					  ?
? чтобы пользователь jarservice мог без пароля переходить в root, ?
? подтягивая переменные окружения root, но не более того?         ?
???????????????????????????????????????????????????????????????????
	$ sudo visudo 
	jarservice ALL=(root) NOPASSWD:/usr/bin/su -
	

Чтобы сохранить журнал действий с sudo в файл, нужно добавить следующую директиву:
	Defaults    logfile="/var/log/sudo.log"
	
Можно сохранять ввод и вывод команд:

	Defaults        log_output
	Defaults        log_input
	Defaults        iolog_dir=/var/log/sudo-io/%{user}
	%admins         ALL=(ALL) NOPASSWD: LOG_INPUT: LOG_OUTPUT: ALL


Переменные окружения
  Каждый экземпляр оболочки в момент старта получает набор данных и настроек, которые и называются переменными окружения.
  Переменные окружения задаются
    • системой   или
	• пользователями
  и могут использоваться программами (которые запускаются из оболочки) во время их выполнения.
  Сами по себе переменные окружения представляют собой пары ключ-значение. 

	$ env (printenv) - вывести на экран текущие переменные окружения.
	
  Переменные окружения доступны всем дочерним процессам.
  Существуют переменные текущего процесса (shell'а).
  Эти переменные НЕ ПЕРЕДАЮТСЯ дочернему процессу.
  
  Различие локальных и глобальных переменных окружения на примере:
	$ LOCAL_VAR=A
	$ export GLOBAL_VAR=B
	$  echo $LOCAL_VAR
    > A
	$ echo $GLOBAL_VAR
    > B
	# вызываем процесс bash как дочерний:
	$ bash
	$ echo $LOCAL_VAR		# ничего не выводит
    >
	$ echo $GLOBAL_VAR
    > B

  ► Задать переменные окружения
    • для текущего сеанса: set
	• для текущего и дочерних процессов: export
	• для всех процессов (навсегда): в файле /etc/profile

  ♦ посмотреть переменные текущего процесса можно командой  set
  ‼ список переменных процесса доступен по PID: cat /proc/<pid>/environ
  

Мультиплексоры

  При удалённом входе в систему бывает очень удобно запускать терминал в фоновом режиме, чтобы отсоединять и подключать его в любой момент.
  Это реализуется с помощью ТЕРМИНАЛЬНОГО МУЛЬТИПЛЕКСОРА.
  
  Когда мультиплексор особенно полезен?
    • в условиях нестабильной связи;
	• в случае необходимости запуска процесса в шелле, но с возможностью отключения от него.

  Другие механизмы запуска процессов в фоне:
    • nohup			#  если на сервере нет screen или если не нужно возвращаться к исполняемому процессу
	• jobs
	• fg
	• bg
	• disown
	• reptyr

После запуска screen можно запустить любое приложение в обычном режиме, но терминал уже запускается как дочерний процесс.

$ ps -aux
  jarserv+   61929  0.0  0.0 231624  2884 ?        Rs   21:10   0:00 SCREEN
  jarserv+   61930  0.1  0.0 226556  5588 pts/1    Ss   21:10   0:00 /bin/bash
  jarserv+   61960  0.0  0.0 227456  3956 pts/1    R+   21:10   0:00 ps -aux

Пример на практике:
  Запускаем в сессии screen простой однострочник, который будет выводить инкрементальное число:
  $ I=0 && while true; do clear; echo $I; let I=${I}+1; sleep 10; done
  
#### Чтобы отсоединиться от экрана, нажимаем последовательно следующие клавиши:
#  Ctrl+a и d.
# Когда сеанс отключится, мы получим сообщение
	«[detached from...».
При этом терминал отсоединится.

  • вывести список сессий screen:
	$ screen -ls
(output):> 
There is a screen on:
    61929.pts-0.localhost    (Detached)
1 Socket in /run/screen/S-jarservice.

  • подключиться к сессии screen:
    $ screen -r 61929.pts-0.localhost

  # Сессий screen можно запускать несколько
  # Для удобства можно давать сессиям имена:
    $ screen -S my_screen
  # Отображаться командой $ screen -ls будет так:
  <PID>.my_screen


Краткий список горячих клавиш:

    • Ctrl+a c — создать ещё одну оболочку
    • Ctrl+a " — просмотреть список оболочек в текущем сеансе screen
    • Ctrl+a NUM — переключиться на NUM окно, где NUM - это номер окна
    • Ctrl+a A — переименовать окно
    • Ctrl+a S — разделить окно горизонтально
    • Ctrl+a | — разделить окно вертикально
    • Ctrl+a tab — переключиться в следующий терминал в пределах окна
    • Ctrl+a Ctrl+a — переключиться между предыдущим окном и текущим
    • Ctrl+a X — закрыть текущую оболочку
    • Ctrl+a Q — закрыть всё, кроме текущей оболочки

‼ tmux является более современным аналогом screen

